buildscript {
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.0"
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
}

apply plugin: "kotlin"

ext {
    PUBLISH_GROUP_ID = 'dev.topping.kotlin.compose.gradle'
    PUBLISH_ARTIFACT_ID = 'dev.topping.kotlin.compose.gradle.gradle.plugin'
    PUBLISH_VERSION = '0.6.0'
}

group PUBLISH_GROUP_ID
version PUBLISH_VERSION

repositories {
    mavenCentral()
    google()
}

dependencies {
    implementation gradleApi()
    implementation "com.android.tools.build:gradle:3.3.0"
    implementation "com.google.guava:guava:31.0.1-jre"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
    ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
}

publishing {
    publications {
        release(MavenPublication) {
            from components.java
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION

            pom {
                name = PUBLISH_ARTIFACT_ID
                description = 'ToppingEngine is a library helps you create mobile applications using one type of layout code and one type of backend code.'
                url = 'https://topping.dev'
                licenses {
                    license {
                        name = 'Creative Commons, Attribution-NoDerivatives 4.0 International'
                        url = 'https://creativecommons.org/licenses/by-nd/4.0/'
                    }
                }
                developers {
                    developer {
                        id = 'toppingdev'
                        name = 'Topping Dev'
                        email = 'toppingdev@gmail.com'
                        organization = 'Topping Dev'
                        organizationUrl = 'https://topping.dev'
                    }
                }
                scm {
                    connection = 'scm:git:github.com/topping-dev/topping-android.git'
                    developerConnection = 'scm:git:ssh://github.com/topping-dev/topping-android.git'
                    url = 'https://github.com/topping-dev/topping-android/tree/main'
                }
                withXml {
                    /*def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }*/
                    /*Node pom = asNode()
                    NodeList pomNodes = pom.value()
                    Node dependencies = pomNodes.get(4)
                    NodeList pomDependencies = dependencies.value()

                    Iterator iterator = pomDependencies.iterator();
                    while (iterator.hasNext()) {
                        Node dependeny = iterator.next()
                        NodeList str = dependeny.get("artifactId")
                        String dependName = str.get(0).value().get(0)
                        if ("f_frame".equals(dependName) || "p_AppComm".equals(dependName)) {
                            iterator.remove()
                        }
                    }*/
                }
            }
        }
    }
    repositories {
        maven {
            name = "sonatype"

            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications
}
